import { SENSITIVE_STRING, } from "@aws-sdk/smithy-client";
import { LexRuntimeServiceServiceException as __BaseException } from "./LexRuntimeServiceServiceException";
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export var FulfillmentState;
(function (FulfillmentState) {
    FulfillmentState["FAILED"] = "Failed";
    FulfillmentState["FULFILLED"] = "Fulfilled";
    FulfillmentState["READY_FOR_FULFILLMENT"] = "ReadyForFulfillment";
})(FulfillmentState || (FulfillmentState = {}));
export var MessageFormatType;
(function (MessageFormatType) {
    MessageFormatType["COMPOSITE"] = "Composite";
    MessageFormatType["CUSTOM_PAYLOAD"] = "CustomPayload";
    MessageFormatType["PLAIN_TEXT"] = "PlainText";
    MessageFormatType["SSML"] = "SSML";
})(MessageFormatType || (MessageFormatType = {}));
export var DialogActionType;
(function (DialogActionType) {
    DialogActionType["CLOSE"] = "Close";
    DialogActionType["CONFIRM_INTENT"] = "ConfirmIntent";
    DialogActionType["DELEGATE"] = "Delegate";
    DialogActionType["ELICIT_INTENT"] = "ElicitIntent";
    DialogActionType["ELICIT_SLOT"] = "ElicitSlot";
})(DialogActionType || (DialogActionType = {}));
export var ConfirmationStatus;
(function (ConfirmationStatus) {
    ConfirmationStatus["CONFIRMED"] = "Confirmed";
    ConfirmationStatus["DENIED"] = "Denied";
    ConfirmationStatus["NONE"] = "None";
})(ConfirmationStatus || (ConfirmationStatus = {}));
export class BadGatewayException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadGatewayException",
            $fault: "server",
            ...opts,
        });
        this.name = "BadGatewayException";
        this.$fault = "server";
        Object.setPrototypeOf(this, BadGatewayException.prototype);
        this.Message = opts.Message;
    }
}
export class DependencyFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "DependencyFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DependencyFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DependencyFailedException.prototype);
        this.Message = opts.Message;
    }
}
export class LoopDetectedException extends __BaseException {
    constructor(opts) {
        super({
            name: "LoopDetectedException",
            $fault: "server",
            ...opts,
        });
        this.name = "LoopDetectedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, LoopDetectedException.prototype);
        this.Message = opts.Message;
    }
}
export class NotAcceptableException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotAcceptableException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAcceptableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAcceptableException.prototype);
    }
}
export var DialogState;
(function (DialogState) {
    DialogState["CONFIRM_INTENT"] = "ConfirmIntent";
    DialogState["ELICIT_INTENT"] = "ElicitIntent";
    DialogState["ELICIT_SLOT"] = "ElicitSlot";
    DialogState["FAILED"] = "Failed";
    DialogState["FULFILLED"] = "Fulfilled";
    DialogState["READY_FOR_FULFILLMENT"] = "ReadyForFulfillment";
})(DialogState || (DialogState = {}));
export class RequestTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestTimeoutException.prototype);
    }
}
export class UnsupportedMediaTypeException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedMediaTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedMediaTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedMediaTypeException.prototype);
    }
}
export var ContentType;
(function (ContentType) {
    ContentType["GENERIC"] = "application/vnd.amazonaws.card.generic";
})(ContentType || (ContentType = {}));
export const ActiveContextTimeToLiveFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ActiveContextFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parameters && { parameters: SENSITIVE_STRING }),
});
export const DeleteSessionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GetSessionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DialogActionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.slots && { slots: SENSITIVE_STRING }),
    ...(obj.message && { message: SENSITIVE_STRING }),
});
export const IntentSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.slots && { slots: SENSITIVE_STRING }),
});
export const GetSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.recentIntentSummaryView && {
        recentIntentSummaryView: obj.recentIntentSummaryView.map((item) => IntentSummaryFilterSensitiveLog(item)),
    }),
    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),
    ...(obj.dialogAction && { dialogAction: DialogActionFilterSensitiveLog(obj.dialogAction) }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
export const PostContentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),
    ...(obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
export const PostContentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.message && { message: SENSITIVE_STRING }),
    ...(obj.encodedMessage && { encodedMessage: SENSITIVE_STRING }),
    ...(obj.encodedInputTranscript && { encodedInputTranscript: SENSITIVE_STRING }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
export const PostTextRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),
    ...(obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }),
    ...(obj.inputText && { inputText: SENSITIVE_STRING }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
export const IntentConfidenceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictedIntentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.slots && { slots: SENSITIVE_STRING }),
});
export const ButtonFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GenericAttachmentFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ResponseCardFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PostTextResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.alternativeIntents && {
        alternativeIntents: obj.alternativeIntents.map((item) => PredictedIntentFilterSensitiveLog(item)),
    }),
    ...(obj.slots && { slots: SENSITIVE_STRING }),
    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),
    ...(obj.message && { message: SENSITIVE_STRING }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
export const PutSessionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }),
    ...(obj.dialogAction && { dialogAction: DialogActionFilterSensitiveLog(obj.dialogAction) }),
    ...(obj.recentIntentSummaryView && {
        recentIntentSummaryView: obj.recentIntentSummaryView.map((item) => IntentSummaryFilterSensitiveLog(item)),
    }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
export const PutSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.message && { message: SENSITIVE_STRING }),
    ...(obj.encodedMessage && { encodedMessage: SENSITIVE_STRING }),
    ...(obj.activeContexts && { activeContexts: SENSITIVE_STRING }),
});
